# Fichier : .github/workflows/android-build.yml

name: Build Android Debug APK

on:
  # Déclenchement manuel uniquement via l'onglet "Actions" de GitHub
  workflow_dispatch:

jobs:
  build-android:
    # Utilise la dernière version stable d'Ubuntu fournie par GitHub
    runs-on: ubuntu-latest

    steps:
      # 1. Récupère le code de votre dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Configure l'environnement Java (JDK 17 est un bon choix pour les projets RN récents)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # 3. Configure Node.js pour installer les dépendances JavaScript
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      # 4. Installe les paquets npm définis dans package.json
      - name: Install npm dependencies
        run: npm install

      # 5. Rend le script gradlew exécutable (nécessaire sur les systèmes Linux comme Ubuntu)
      - name: Grant execute permission to gradlew
        run: chmod +x android/gradlew

      # 6. Construit l'APK de DÉBOGAGE
      #    La commande 'assembleDebug' crée un APK signé avec une clé de débogage par défaut.
      #    --no-daemon est une bonne pratique dans les environnements CI pour éviter les problèmes de cache.
      - name: Build Debug APK
        run: ./gradlew assembleRelease --no-daemon
        working-directory: android # Exécute la commande depuis le dossier 'android'

      # 7. Téléverse l'APK généré comme un artefact de build
      #    Cela vous permettra de le télécharger depuis la page du workflow sur GitHub.
      - name: Upload Debug APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          # Nom de l'artefact qui apparaîtra sur GitHub
          name: app-test

          # Chemin vers le fichier APK généré par 'assembleDeb
          path: android/app/build/outputs/apk/debug/app-release.apk
